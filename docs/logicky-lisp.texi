\input texinfo

@c Logicky-Lisp.texi --- Reference manual

@c Copyright (C) 2022 Henrik Hörmann

@c This file is part of Logicky-Lisp.



@c Commentary:

@c Generated automatically by Declt version 4.0 beta 1 "William Riker"
@c on Thu May 19 16:41:58 2022 GMT+1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename Logicky-Lisp.info
@settitle The Logicky-Lisp Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The Logicky-Lisp Reference Manual, version 0.0.1.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@tpindex @t{\name\}
@tpindex Module, @t{\name\}
@end macro

@c Files
@macro fileindex{name}
@tpindex @t{\name\}
@tpindex File, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro expandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro combinationsubindex{name}
@findex @r{Method Combination, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Logicky-Lisp Reference Manual: (Logicky-Lisp). The Logicky-Lisp Reference Manual.
@end direntry



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Logicky-Lisp Reference Manual
@subtitle Evaluates and proves arguments in different formal logics, version 0.0.1

@author Henrik Hörmann <@email{leinfink@atchar{}mailbox.org}>

@page
@quotation
This manual was generated automatically by Declt 4.0b1.
@end quotation
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Logicky-Lisp Reference Manual
This is the Logicky-Lisp Reference Manual, version 0.0.1,
generated automatically by Declt version 4.0b1.

@menu
* Introduction:: What Logicky-Lisp is all about
* Systems:: The systems documentation
* Modules:: The modules documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu
@end ifnottex



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Systems, Top, Top
@chapter Introduction
Welcome to the reference manual of Logicky-Lisp.



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Modules, Introduction, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The logicky-lisp system::
@end menu


@c -----------------------
@c The logicky-lisp system
@c -----------------------
@node The logicky-lisp system, , Systems, Systems
@section @t{logicky-lisp}
@anchor{❨1❩}@c
@systemindex{logicky-lisp}@c
Evaluates and proves arguments in different formal logics.
@table @strong
@item Long Name
Logicky-Lisp
@item Author
Henrik Hörmann <@email{leinfink@atchar{}mailbox.org}>
@item Home Page
@uref{}
@item Source Control
@t{(GIT )}
@item Bug Tracker
@uref{}
@item License
BSD-3-Clause
@item Version
0.0.1
@item Source
@ref{❨3❩, , @t{logicky-lisp.asd}}.
@item Child Component
@ref{❨2❩, , @t{src}}@: (module).
@end table



@c ====================================================================
@c Modules
@c ====================================================================
@node Modules, Files, Systems, Top
@chapter Modules
Modules are listed depth-first from the system components tree.

@menu
* The logicky-lisp/src module::
@end menu


@c ---------------------------
@c The logicky-lisp/src module
@c ---------------------------
@node The logicky-lisp/src module, , Modules, Modules
@section @t{logicky-lisp/src}
@anchor{❨2❩}@c
@moduleindex{src}@c
@table @strong
@item Source
@ref{❨3❩, , @t{logicky-lisp.asd}}.
@item Parent Component
@ref{❨1❩, , @t{logicky-lisp}}@: (system).
@item Child Components
@itemize @bullet
@item
@ref{❨4❩, , @t{packages.lisp}}@: (file).
@item
@ref{❨5❩, , @t{logicky-lisp.lisp}}@: (file).
@item
@ref{❨6❩, , @t{logic.lisp}}@: (file).
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Modules, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The logicky-lisp/logicky-lisp․asd file::
* The logicky-lisp/src/packages․lisp file::
* The logicky-lisp/src/logicky-lisp․lisp file::
* The logicky-lisp/src/logic․lisp file::
@end menu

@node The logicky-lisp/logicky-lisp․asd file, The logicky-lisp/src/packages․lisp file, Lisp files, Lisp files
@subsection @t{logicky-lisp/logicky-lisp.asd}
@anchor{❨3❩}@c
@fileindex{logicky-lisp.asd}@c
@table @strong
@item Source
@ref{❨3❩, , @t{logicky-lisp.asd}}.
@item Parent Component
@ref{❨1❩, , @t{logicky-lisp}}@: (system).
@item ASDF Systems
@ref{❨1❩, , @t{logicky-lisp}}.
@end table

@node The logicky-lisp/src/packages․lisp file, The logicky-lisp/src/logicky-lisp․lisp file, The logicky-lisp/logicky-lisp․asd file, Lisp files
@subsection @t{logicky-lisp/src/packages.lisp}
@anchor{❨4❩}@c
@fileindex{packages.lisp}@c
@table @strong
@item Source
@ref{❨3❩, , @t{logicky-lisp.asd}}.
@item Parent Component
@ref{❨2❩, , @t{src}}@: (module).
@item Packages
@ref{❨7❩, , @t{logicky-lisp}}.
@end table

@node The logicky-lisp/src/logicky-lisp․lisp file, The logicky-lisp/src/logic․lisp file, The logicky-lisp/src/packages․lisp file, Lisp files
@subsection @t{logicky-lisp/src/logicky-lisp.lisp}
@anchor{❨5❩}@c
@fileindex{logicky-lisp.lisp}@c
@table @strong
@item Dependency
@ref{❨4❩, , @t{packages.lisp}}@: (file).
@item Source
@ref{❨3❩, , @t{logicky-lisp.asd}}.
@item Parent Component
@ref{❨2❩, , @t{src}}@: (module).
@item Public Interface
@ref{❨12❩, , @t{main}}@: (function).
@item Internals
@itemize @bullet
@item
@ref{❨20❩, , @t{%main}}@: (function).
@item
@ref{❨29❩, , @t{greet}}@: (function).
@item
@ref{❨22❩, , @t{help}}@: (function).
@end itemize
@end table

@node The logicky-lisp/src/logic․lisp file, , The logicky-lisp/src/logicky-lisp․lisp file, Lisp files
@subsection @t{logicky-lisp/src/logic.lisp}
@anchor{❨6❩}@c
@fileindex{logic.lisp}@c
@table @strong
@item Dependency
@ref{❨5❩, , @t{logicky-lisp.lisp}}@: (file).
@item Source
@ref{❨3❩, , @t{logicky-lisp.asd}}.
@item Parent Component
@ref{❨2❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨16❩, , @t{*interpretation*}}@: (special variable).
@item
@ref{❨14❩, , @t{all-interpretations}}@: (function).
@item
@ref{❨18❩, , @t{l-and}}@: (function).
@item
@ref{❨8❩, , @t{l-cond}}@: (function).
@item
@ref{❨15❩, , @t{l-eq}}@: (function).
@item
@ref{❨9❩, , @t{l-not}}@: (function).
@item
@ref{❨11❩, , @t{l-or}}@: (function).
@item
@ref{❨10❩, , @t{semantic-consequence-p}}@: (function).
@item
@ref{❨19❩, , @t{tautologyp}}@: (function).
@item
@ref{❨13❩, , @t{truep}}@: (function).
@item
@ref{❨17❩, , @t{well-formed-p}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨30❩, , @t{*binary-connectives*}}@: (special variable).
@item
@ref{❨33❩, , @t{*unary-connectives*}}@: (special variable).
@item
@ref{❨27❩, , @t{all-interpretations-recursive}}@: (function).
@item
@ref{❨23❩, , @t{assert-wff}}@: (macro).
@item
@ref{❨31❩, , @t{binary-connective-p}}@: (function).
@item
@ref{❨32❩, , @t{connective-p}}@: (function).
@item
@ref{❨25❩, , @t{find-parameters}}@: (function).
@item
@ref{❨28❩, , @t{mapcar-cons-flat}}@: (macro).
@item
@ref{❨21❩, , @t{propositional-parameter-p}}@: (function).
@item
@ref{❨26❩, , @t{reduce-atoms}}@: (macro).
@item
@ref{❨24❩, , @t{unary-connective-p}}@: (function).
@end itemize
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The logicky-lisp package::
@end menu


@c ------------------------
@c The logicky-lisp package
@c ------------------------
@node The logicky-lisp package, , Packages, Packages
@section @t{logicky-lisp}
@anchor{❨7❩}@c
@packageindex{logicky-lisp}@c
@table @strong
@item Source
@ref{❨4❩, , @t{packages.lisp}}.
@item Use List
@t{common-lisp}.
@item Public Interface
@itemize @bullet
@item
@ref{❨16❩, , @t{*interpretation*}}@: (special variable).
@item
@ref{❨14❩, , @t{all-interpretations}}@: (function).
@item
@ref{❨18❩, , @t{l-and}}@: (function).
@item
@ref{❨8❩, , @t{l-cond}}@: (function).
@item
@ref{❨15❩, , @t{l-eq}}@: (function).
@item
@ref{❨9❩, , @t{l-not}}@: (function).
@item
@ref{❨11❩, , @t{l-or}}@: (function).
@item
@ref{❨12❩, , @t{main}}@: (function).
@item
@ref{❨10❩, , @t{semantic-consequence-p}}@: (function).
@item
@ref{❨19❩, , @t{tautologyp}}@: (function).
@item
@ref{❨13❩, , @t{truep}}@: (function).
@item
@ref{❨17❩, , @t{well-formed-p}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨20❩, , @t{%main}}@: (function).
@item
@ref{❨30❩, , @t{*binary-connectives*}}@: (special variable).
@item
@ref{❨33❩, , @t{*unary-connectives*}}@: (special variable).
@item
@ref{❨27❩, , @t{all-interpretations-recursive}}@: (function).
@item
@ref{❨23❩, , @t{assert-wff}}@: (macro).
@item
@ref{❨31❩, , @t{binary-connective-p}}@: (function).
@item
@ref{❨32❩, , @t{connective-p}}@: (function).
@item
@ref{❨25❩, , @t{find-parameters}}@: (function).
@item
@ref{❨29❩, , @t{greet}}@: (function).
@item
@ref{❨22❩, , @t{help}}@: (function).
@item
@ref{❨28❩, , @t{mapcar-cons-flat}}@: (macro).
@item
@ref{❨21❩, , @t{propositional-parameter-p}}@: (function).
@item
@ref{❨26❩, , @t{reduce-atoms}}@: (macro).
@item
@ref{❨24❩, , @t{unary-connective-p}}@: (function).
@end itemize
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Public Interface::
* Internals::
@end menu


@c ----------------
@c Public Interface
@c ----------------
@node Public Interface, Internals, Definitions, Definitions
@section Public Interface
@menu
* Public special variables::
* Public ordinary functions::
@end menu

@node Public special variables, Public ordinary functions, Public Interface, Public Interface
@subsection Special variables
@defvr {Special Variable} {*interpretation*}
@anchor{❨16❩}@c
@specialsubindex{*interpretation*}@c
An alist that assings truth or falsehood to parameters.@*
Truth of parameter P is stored as (P . T)@comma{} falsehood is stored as (P).
Use (CDR (ASSOC P INTERPRETATION) to get the truth value of P.
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end defvr

@node Public ordinary functions, , Public special variables, Public Interface
@subsection Ordinary functions
@deffn {Function} {all-interpretations} (parameters)
@anchor{❨14❩}@c
@functionsubindex{all-interpretations}@c
Returns a list of all possible interpretations of PARAMETERS.@*
See `*interpretation*` for a description of the interpretation format.
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {l-and} (p q)
@anchor{❨18❩}@c
@functionsubindex{l-and}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {l-cond} (p q)
@anchor{❨8❩}@c
@functionsubindex{l-cond}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {l-eq} (p q)
@anchor{❨15❩}@c
@functionsubindex{l-eq}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {l-not} (p)
@anchor{❨9❩}@c
@functionsubindex{l-not}@c
Logical negation. Returns nil if P is t. Otherwise returns t.
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {l-or} (p q)
@anchor{❨11❩}@c
@functionsubindex{l-or}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {main} ()
@anchor{❨12❩}@c
@functionsubindex{main}@c
Entry point for the executable.
  Reads command line arguments.
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨5❩, , @t{logicky-lisp.lisp}}.
@end table
@end deffn
@deffn {Function} {semantic-consequence-p} (conclusion &rest premises)
@anchor{❨10❩}@c
@functionsubindex{semantic-consequence-p}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {tautologyp} (formula)
@anchor{❨19❩}@c
@functionsubindex{tautologyp}@c
Returns t if FORMULA is t under every possible interpretation (i.e. is a semantic
consequence of the empty set of premises).
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {truep} (formula)
@anchor{❨13❩}@c
@functionsubindex{truep}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {well-formed-p} (formula)
@anchor{❨17❩}@c
@functionsubindex{well-formed-p}@c
Returns t if FORMULA is well-formed under the syntax of the active object language.
Assumes that FORMULA is an s-expression. Recursively checks whether it is made up
exclusively of propositional parameters (logical atoms) connected through the available
logical operators.
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn


@c ---------
@c Internals
@c ---------
@node Internals, , Public Interface, Definitions
@section Internals
@menu
* Private special variables::
* Private macros::
* Private ordinary functions::
@end menu

@node Private special variables, Private macros, Internals, Internals
@subsection Special variables
@defvr {Special Variable} {*binary-connectives*}
@anchor{❨30❩}@c
@specialsubindex{*binary-connectives*}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*unary-connectives*}
@anchor{❨33❩}@c
@specialsubindex{*unary-connectives*}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end defvr

@node Private macros, Private ordinary functions, Private special variables, Internals
@subsection Macros
@deffn {Macro} {assert-wff} (formula)
@anchor{❨23❩}@c
@macrosubindex{assert-wff}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Macro} {mapcar-cons-flat} (car val list)
@anchor{❨28❩}@c
@macrosubindex{mapcar-cons-flat}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Macro} {reduce-atoms} (formula resultf reducef)
@anchor{❨26❩}@c
@macrosubindex{reduce-atoms}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn

@node Private ordinary functions, , Private macros, Internals
@subsection Ordinary functions
@deffn {Function} {%main} (argv)
@anchor{❨20❩}@c
@functionsubindex{%main}@c
Parse CLI args.
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨5❩, , @t{logicky-lisp.lisp}}.
@end table
@end deffn
@deffn {Function} {all-interpretations-recursive} (parameters)
@anchor{❨27❩}@c
@functionsubindex{all-interpretations-recursive}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {binary-connective-p} (formula)
@anchor{❨31❩}@c
@functionsubindex{binary-connective-p}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {connective-p} (formula connectives num_elements)
@anchor{❨32❩}@c
@functionsubindex{connective-p}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {find-parameters} (formula)
@anchor{❨25❩}@c
@functionsubindex{find-parameters}@c
Returns a list of all propositional parameters (logical atoms) in FORMULA.
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {greet} ()
@anchor{❨29❩}@c
@functionsubindex{greet}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨5❩, , @t{logicky-lisp.lisp}}.
@end table
@end deffn
@deffn {Function} {help} ()
@anchor{❨22❩}@c
@functionsubindex{help}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨5❩, , @t{logicky-lisp.lisp}}.
@end table
@end deffn
@deffn {Function} {propositional-parameter-p} (formula)
@anchor{❨21❩}@c
@functionsubindex{propositional-parameter-p}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn
@deffn {Function} {unary-connective-p} (formula)
@anchor{❨24❩}@c
@functionsubindex{unary-connective-p}@c
@table @strong
@item Package
@ref{❨7❩, , @t{logicky-lisp}}.
@item Source
@ref{❨6❩, , @t{logic.lisp}}.
@end table
@end deffn



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c Logicky-Lisp.texi ends here
